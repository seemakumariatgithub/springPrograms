JWT:

  Stands for JSON Web Token.
  This allows to transmit information securly between parties as a:
            compact,
            self-contaned,
            digitaly singed JSON Object.
==============================================================================================
Steps to implement JWT authentication in SpringBoot application:

Step1: Create Spring boot project.
Step2: Add Dependencies
Step3: Configure Spring Security
Step4: Create userDetailsService
Step5: Create a JWT Utility Class
Step6: Create login endpoint
Step7: Create protected resource endpoint
Step8: Add Token Validation and Authentication Filter
Step9: Test the endpoint
Step10: Secure Secret Key
Step11: Handle Token Expiration and Refrech(Optional)
Step12: Logging and Error Handling

=============================================================================================
Step1: Create Spring boot project:
        Create a new SpringBoot project

Step2: Add Dependencies:
        Add two dependencies:
          1. Spring Security
          2. jjwt library -> for JWT support
      pm.xml should look something like this :

                <dependencies>
                <!-- Spring Boot Starter -->
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter</artifactId>
                </dependency>
                <!-- Spring Security -->
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-security</artifactId>
                </dependency>
                <!-- JWT Library -->
                <dependency>
                    <groupId>io.jsonwebtoken</groupId>
                    <artifactId>jjwt</artifactId>
                    <version>0.9.1</version> <!-- Use the latest version available -->
                </dependency>
            </dependencies>

Step3: Configure Spring Security:
       - Create Security configuration class that extends "WebSecurityConfigurerAdaptor" class.
       - In this class we specify, the security settings using 'configure' method for:
              1. indicating the authentication and authorization rules.
              2. also we will exclud the login and token endpoint to allow unauhenticated access.

              @Configuration
              @EnableWebSecurity
              public class SecurityConfig extends WebSecurityConfigurerAdapter {
                  @Override
                  protected void configure(HttpSecurity http) throws Exception {
                      http.csrf().disable()
                          .authorizeRequests()
                          .antMatchers("/login", "/token").permitAll() // Exclude login and token endpoints from authentication
                          .anyRequest().authenticated();
                  }
              }

Here: CSRF : is Cross Site Request Forgery :
            This is a type of atttack, 
                which forces the authenticated user to send the request to the Web Appliccation,
                for which the user is not currently authenticated.


Step4: Create userDetailsService:
        
Step5: Create a JWT Utility Class
Step6: Create login endpoint
Step7: Create protected resource endpoint
Step8: Add Token Validation and Authentication Filter
Step9: Test the endpoint
Step10: Secure Secret Key
Step11: Handle Token Expiration and Refrech(Optional)
Step12: Logging and Error Handling

