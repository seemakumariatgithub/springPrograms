MODULES OF SPRING FRAMEWORK:

Spring framework has feeatures that are organized into 20 modules.
These 20 modules are grouped into 7 groups.
    1. Core Container
    2. AOP
    3. Instrumentatio
    4. Messaging
    5. Data Access/Integration
    6. Web
    7. Test
========================================================================
Below are the details of modules for each feature and their Artifact name.
Artifact names is used as(correatesto) artifact IDs in the Dependency Management tool.

========================================================================
1. Core Container
    This containes:
        -spring-core
        -spring-beans
        -spring-context
        -spring-context-support
        -spring-expression (Spel - Spring Expression Language)

2. AOP
    This contains:
        -spring-aop
        -spring-aspects

3. Instrumentation
    This contains:
        -spring-instrument
        -spring-instrument-tomcat
4. Messaging
5. Data Access/Integration
6. Web
7. Test
==========================================================================
1. Core Container
    This containes:
        -spring-core
        -spring-beans
        -spring-context
        -spring-context-support
        -spring-expression (Spel - Spring Expression Language)

        -spring-core: 
        -spring-beans:
            Above two modules provide fundamental parts of framework.
                including IoC and dependency injection feature.

            'BeanFactory' is the sophisticated implementation of factory pattern.
             This removes the need for programatic singleton
                and allows to decouple the configuration 
                    and specification of dependency from the program logic.

        -spring-context:
            - This is build on the solid base provided by 'spring-core' and 'spring-beans'.
            - This is the 'means' to access the object in framework-style.
            - This is also called as context module.
            - This module inherits its fetures from beans modules, 
                and adds support for 
                        - internationalization 
                        - event propogation
                        - resource loading
                        - transparent creation of context
            - This module also supports J2EE features, EJB, JMX, basic remoting.
            - The 'ApplicationContext' interface is the focal point of context module.
            
        -spring-context-support:
            This module provides support for integrating common third-party libraries 
                into the spring application context for:
                    1. caching (EhCache, Guava, JCache)
                    2. mailing(JavaMailing)
                    3. scheduling( CommonJ, Quatz)
                    4. templates engine(FreeMaker, JasperReport, Velocity)

        -spring-expression (Spel - Spring Expression Language):
                This provides powerful Expression Language, for querying and manipulating an object graph at runtime.
                This module supports:
                    1- setting and getting property values.
                    2- property assignment
                    3- method invocation
                    4- accessing the contents of arrays, collections and indexers
                    5- Logical and arithmetic operators
                    6- named varriables
                    7- retrival of objects by name from IoC
                    8- lists projection and selection
                    9- common list aggregation

=========================================================================
2. AOP
    This contains:
        -spring-aop:
            This module provides aspect-oriented programing implementation .
            It allows to define, for eg: 
                - method interceptors and pointcuts to cleanly decouple code
                    that implements functionality that should be seperated.
                - Using source level metadata functionality, we can incorporate behavioral information into the code.
                    
        -spring-aspects:
                This module provides integration with AspectJ.
========================================================================
3. Instrumentation
    This contains:
        -spring-instrument:
            This provides support for class instrumnetaion 
                and classloader implementation.

        -spring-instrument-tomcat:
            This module contains the spring's instrumentation agent for tomcat.
=========================================================================
IoC: Inversion of Control
DI: Depedency Injection is the specialized version of IoC.
    In DI, the objects define their dependecies only through:
        1. Constructor argument
        2. Argument to the factory method
        3. Properties that are set on the object instance after it is constructed or returned from a factory method.

The IoC container then inject those dependency when bean is created.

There are two packages that forms the basis of spring framework's IoC container, these are:
      1. org.springframework.beans
      2. org.springframework.context

1. BeanFactory Interface: 
            It provides the advanced configuration mechanism capable of managing any type of object.
            It is defeined in the org.springframework.beans.factory package.
            This is implemented by the object that holds many bean definitions, each uniquly identified by String name.

            BeanFactory centralizes the configuration of application components.
            BeanFactory is central registry for application component.
            This interface loads the bean efinition stored in the configuration source like xml.

                Bean factory implementations should support the standard bean lifecycle interfaces as far as possible. 
                The full set of initialization methods and their standard order is:                
                   1. BeanNameAware's setBeanName
                   2. BeanClassLoaderAware's setBeanClassLoader
                   3. BeanFactoryAware's setBeanFactory
                   4. EnvironmentAware's setEnvironment
                   5. EmbeddedValueResolverAware's setEmbeddedValueResolver
                   6. ResourceLoaderAware's setResourceLoader (only applicable when running in an application context)
                   7. ApplicationEventPublisherAware's setApplicationEventPublisher (only applicable when running in an application context)
                   8. MessageSourceAware's setMessageSource (only applicable when running in an application context)
                   9. ApplicationContextAware's setApplicationContext (only applicable when running in an application context)
                   10. ServletContextAware's setServletContext (only applicable when running in a web application context)
                   11. postProcessBeforeInitialization methods of BeanPostProcessors
                   12. InitializingBean's afterPropertiesSet
                   13. a custom init-method definition
                   14. postProcessAfterInitialization methods of BeanPostProcessors

                On shutdown of a bean factory, the following lifecycle methods apply:
                
                  1. postProcessBeforeDestruction methods of DestructionAwareBeanPostProcessors
                  2. DisposableBean's destroy
                  3. a custom destroy-method definition
    
2. ApplicationContext Interface: 
        This is the sub-interface of BeanFactory or superset of BeanFactory. 
        This is defined in 'org.springframework.context' package
        This Interface provides:
              1. Easier integration with AOP's features.
              2. Message resource handling
              3. Event publication
              4. Application layer specific context, like 'WebApplicatonContext' for Web application.
         This interface is the central interface to provide the configuration of an application.

=======================================================================================================
BEAN:
    In Spring, the object that forms the backbone of the application and
        that is managed by IoC container is called 'bean'.
    Or we can say, 'Bean' is an object that is initialised, assembled and managed by SpringIoC container.
    Otherwise 'bean' is simple object just like other object in java application.


========================================================================================================
IoC CONTAINER OVERVIEW:

    The 'org.springframework.context.ApplicationContext' interface represents the Spring Ioc Container.

    Thus this is reponsiible for instantiating, configuring and assembling the bean.
    The Container gets the instruction to do above activity, by reading the configuration metadata.
    The Configuration metadata is representated as annotated componet class, configuration class with factory method,
            exteranl XML file or Groovy scripts.
    With either of these format, we can compose our application and the rich interdependencies among those components.

    In stand alone application it is common to create instance of 'AnnotationConfigApplicationContext' and 'ClassPathXmlApplicationContext'.

NOTE: Our application classes are combined with configuration metadata,
        so after Application Context is created and inititalized, 
            our application is fully configured and executable system or application.
==================================================================================================================
CONFIGURATION METADATA:
    








