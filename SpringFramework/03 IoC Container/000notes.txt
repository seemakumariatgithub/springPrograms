Dependency Management and Naming Conventions:

NOTE : Dependency Management and Dependency Injection are two completly different concept.

-To get all those nice features of spring into our application we need to assenble all the libraries needed.
        and get them onto our classpath at runtime and possibly at compile time as well.
-These dependencies are not virtual components that are injected, but are physical resources in the file system.
-The process of dependency management involves locating these resources, storing them and adding them to the classpath.

-Dependencies can be :
        1. DIRECT:
            - For eg:
                my application depends on Spring at runtime..
        2. INDIRECT: 
            - For eg: 
                my application depends on common-dbcp, which depends on common-pool
            - This type of dependency is called 'transitive'.
            - Indirect dependeies are hard to identify and manage.
=========================================================================
LOGGING:

==========================================================================
 1- The Ioc container

IoC: Inversion of Control
DI: Depedency Injection is the specialized version of IoC.
This is the process where object define their dependency, ie, the other objects they work with,
    only through:
        1. Constructor argument
        2. Argument to the factory method
        3. Properties that are set on the object instance after it is constructed or returned from a factory method.

The IoC container then injects those dependency when bean is created.
This process is fundamentaly inverse, of the bean itself controlling the instantiation or location of its dependencies,
    by using direct construction of classes or mechanis such as 'sersvice locator' pattern.

There are two packages that forms the basis of spring framework's IoC container, these are:
      1. org.springframework.beans
      2. org.springframework.context

1. BeanFactory Interface: 
            It provides the advanced configuration mechanism capable of managing any type of object.
            It is defeined in the org.springframework.beans.factory package.
            This is implemented by the object that holds many bean definitions, each uniquly identified by String name.

            BeanFactory centralizes the configuration of application components.
            BeanFactory is central registry for application component.
            This interface loads the bean definition stored in the configuration source like xml.

                Bean factory implementations should support the standard bean lifecycle interfaces as far as possible. 
                The full set of initialization methods and their standard order is:                
                   1. BeanNameAware's setBeanName
                   2. BeanClassLoaderAware's setBeanClassLoader
                   3. BeanFactoryAware's setBeanFactory
                   4. EnvironmentAware's setEnvironment
                   5. EmbeddedValueResolverAware's setEmbeddedValueResolver
                   6. ResourceLoaderAware's setResourceLoader (only applicable when running in an application context)
                   7. ApplicationEventPublisherAware's setApplicationEventPublisher (only applicable when running in an application context)
                   8. MessageSourceAware's setMessageSource (only applicable when running in an application context)
                   9. ApplicationContextAware's setApplicationContext (only applicable when running in an application context)
                   10. ServletContextAware's setServletContext (only applicable when running in a web application context)
                   11. postProcessBeforeInitialization methods of BeanPostProcessors
                   12. InitializingBean's afterPropertiesSet
                   13. a custom init-method definition
                   14. postProcessAfterInitialization methods of BeanPostProcessors

                On shutdown of a bean factory, the following lifecycle methods apply:
                
                  1. postProcessBeforeDestruction methods of DestructionAwareBeanPostProcessors
                  2. DisposableBean's destroy
                  3. a custom destroy-method definition
    
2. ApplicationContext Interface: 
        This is the sub-interface of BeanFactory or superset of BeanFactory. 
        This is defined in 'org.springframework.context' package
        This Interface provides:
              1. Easier integration with AOP's features.
              2. Message resource handling
              3. Event publication
              4. Application layer specific context, like 'WebApplicatonContext' for Web application.
         This interface is the central interface to provide the configuration of an application.

NOTE:
    In short, the 'BeanFactory' provides the cofiguration framework and basic functionality
              the 'ApplicationContext' adds more enterprise-specific functionality.
=======================================================================================================
BEAN:
    In Spring, the object that is the backbone of the application and
        that is managed by IoC container is called 'bean'.
    Or we can say, 'Bean' is an object that is initialised, assembled and managed by Spring IoC container.
    Otherwise 'bean' is simple object just like other object in java application.


========================================================================================================
IoC CONTAINER OVERVIEW:

    The 'org.springframework.context.ApplicationContext' interface represents the Spring Ioc Container.

    This is reponsiible for instantiating, configuring and assembling the bean.
    The Container gets the instruction to do above activity, by reading the configuration metadata.
    The Configuration metadata is representated as annotated component class, configuration class with factory method,
            exteranl XML file or Groovy scripts.
    With either of these format, we can express the object that compose our application and the rich interdependencies among those components/objects.

    In stand alone application it is common to create instance of 'AnnotationConfigApplicationContext' and 'ClassPathXmlApplicationContext'.

NOTE: Our application classes are combined with configuration metadata,
        so after Application Context is created and inititalized, 
            our application is fully configured and executable system or application.
==================================================================================================================
CONFIGURATION METADATA:
    The Configuration metadata represents how we as developer tell the IoC(Spring) container to instantiate, 
        configure and assemble the object in our application.

NOTE: The Spring Ioc Container has totaly decoupled itself from the formate in which the configuration metadata can be written.

    Configuration Metadata can be in the form of:
        1. XML
        2. Annotation Based Configuration: This was intorduced in Spring 2.3
        3. Java Based Configuration: This was introduced in Spring 3.0
                Many features provided by the Spring JavaConfig project became part of the core Spring Framework.
                To use these new features,used annotations, 
                        @Configuration
                        @Bean
                        @Import
                        @DependsOn

Spring cofiguration have atleast one bean definition, that container must manage.
    1. In XML based configuration bean is defined by 
        <beans>
            <bean/> => bean is defined here
        </beans>

    2. Java configuration typically uses @Bean annotated methods, inside the @Configuration class.

NOTE: These bean definitions are the actual object that make up the application.
Typically we define:
    1. service layer object
    2.Data access objects
    3. Presentation objects, like action instance
    4.infrastructure object like Hibernate sessionfactories, JMS queues.

Springs Integration with AspectJ is used to configure object that have been created outside the IoC Container.

Below is the example that shows the basic structure of XML-based configuration metadata:
    
    <?xml version="1.0" encoding="UTF-8"?>
        <beans xmlns="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.springframework.org/schema/beans
         https://www.springframework.org/schema/beans/spring-beans.xsd">

             <bean id="..." class="...">
             <!-- collaborators and configuration for this bean go here -->
             </bean>

             <bean id="..." class="...">
             <!-- collaborators and configuration for this bean go here -->
             </bean>
         <!-- more bean definitions go here -->
        </beans>

    Here: 
        id : is the string that we use to identify the individual bean definition.
            The value of 'id' used for collaborating objects as well.

        class: is the type for the bean
                class uses fully qualified classname.
        ============================================================
2. Instantiating a container:

    Instantiating the spring IoC container is straight forward.
    We use 'ApplicationContext' constructor for this.
    We pass the location path/paths to the constructor.
    This path is the resource string that allows to load the configuration metadata from veriety of external resources.
            like : file system, or java CLASSPATH etc.

ApplicationCOntext context=new classPathXmlApplicationContext('sersvice.xml','daos.xml')

NOTE: Resource paths are used to construct the Applications Contexts.
      
We can use one or more occurrences of the <import/> element to load bean definitions from another file/files
For eg:
            <beans>
                 <import resource="services.xml"/>
                 <import resource="resources/messageSource.xml"/>
                 <import resource="/resources/themeSource.xml"/>

                 <bean id="bean1" class="..."/>
                 <bean id="bean2" class="..."/>
            </beans>

All location paths are relative to the definition file doing the importing.

        =========================================================
Bean Overview:

    Spring IoC manages one or more beans.
    These bean's definition are provided in the configuration metadata.
    Bean definitions are represented as 'BeanDefinition' object.
    These defiitions contains(among other information) following metadata:
        1. Packaged qualified class name:
        2. Bean behavioral configuration elements, like scope, lifecyclecallback, etc
        3. Referencs to other beans
        4. Other configuration settings.


The bean definition have following :

class :  “Instantiating beans”
name : “Naming beans”

scope : “Bean scopes”
constructor arguments: “Dependency Injection”
properties : “Dependency Injection”
autowiring mode: “Autowiring collaborators”
lazy-initialization mode : “Lazy-initialized beans”
initialization method : “Initialization callbacks”
destruction method : “Destruction callbacks”

DEPENDENCY INJECTIION:
    /*
    constructor arguments: “Dependency Injection”
    properties : “Dependency Injection”
    */
    Definition for this have been provided above:
    
    Advantages of Dependency Injection:
        1.Code is cleaner
        2.Decoupling is more effective
        3.The Object doesnot lookup for its dependency, 
                and dosenot know the location or class of the  dependency.
        4. Testing becomes easier,
                specially when the dependencies are not abstract class or interface
                DI allows stub or mock implementations to be used in unit testing

    There are two types of dependency injection:
        1.Constructor base dependency injection
        2 Setter based dependency injection

        1.Constructor base dependency injection
            -This is done by container, by invoking the constructor with number of arguments,
                each representing dependency.

        Eg:
            public class SimpleMovieLister {
                 // the SimpleMovieLister has a dependency on a MovieFinder
                 private MovieFinder movieFinder;

                 // a constructor so that the Spring container can inject a MovieFinder
                 public SimpleMovieLister(MovieFinder movieFinder) {
                 this.movieFinder = movieFinder;
                 }

                 // business logic that actually uses the injected MovieFinder is omitted...
            }

        CONSTRUCTOR ARGUMENT RESOLUTION:

            COnstructor argument resolution maching occures using the argument's type.
            If no potential ambiguity exists in the constructor arguments of a bean definition,
                then the oder in which the constructor arguments are defined in a bean definition is the order 
                    in which those arguments are supplied to the appropriate constructor, when bean is being instantiated.
        For Eg:
            For below class
            package x.y;
            public class Foo {
                 public Foo(Bar bar, Baz baz) {
                 // ...
                 }
            }

            The metadata configuration will be like:

            <beans>
                 <bean id="foo" class="x.y.Foo">
                     <constructor-arg ref="bar"/>
                     <constructor-arg ref="baz"/>
                 </bean>
                 <bean id="bar" class="x.y.Bar"/>
                 <bean id="baz" class="x.y.Baz"/>
            </beans>

            When a bean is referenced , and type is known, the matching can occur.
            While a simple type is used, with <valu>true</value>, Spring cannot determine the type of the value.
                so spring cannot match the type without help.
            For Eg:
            
                 public class ExampleBean {
                     private int years;
                     private String ultimateAnswer;

                     public ExampleBean(int years, String ultimateAnswer) {
                     this.years = years;
                     this.ultimateAnswer = ultimateAnswer;
                     }
                }

            Here container can use 'type' matching, only if we explicitly specify the 'type' in the bean attribute.
          
            For Eg:
                <bean id="exampleBean" class="examples.ExampleBean">
                     <constructor-arg type="int" value="7500000"/>
                     <constructor-arg type="java.lang.String" value="42"/>
                </bean>

                We can also use 'index' attribute ro specify the index of construnctor's arguments.
                For Eg:                    
                    <bean id="exampleBean" class="examples.ExampleBean">
                         <constructor-arg index="0" value="7500000"/>
                         <constructor-arg index="1" value="42"/>
                    </bean>

                NOTE: Here index is 0 based.

                We can also use constructor's parameter's name:
               For Eg:
                    <bean id="exampleBean" class="examples.ExampleBean">
                         <constructor-arg name="years" value="7500000"/>
                         <constructor-arg name="ultimateAnswer" value="42"/>
                    </bean>

        2 Setter based dependency injection : 
            This type of dependency is injected by container calling the setter method on the bean,
                after invoking 'no-argument constructor' or 'no-argument factory method'.

            Eg:
                public class SimpleMovieLister {
                     // the SimpleMovieLister has a dependency on the MovieFinder
                     private MovieFinder movieFinder;
    
                     // a setter method so that the Spring container can inject a MovieFinder
                     public void setMovieFinder(MovieFinder movieFinder) {
                     this.movieFinder = movieFinder;
                     }
                     // business logic that actually uses the injected MovieFinder is omitted...
                }

        NOTE: Setter based DI can also be used when some dependencies are already been injected by 
                Constructor based DI.

        Which one to use then Constructor-based or setter-based DI?
            Since we can mix  both, it is recomended as 'THUMB RULE' to use 
                    constrcutors for mandatory dependencies and 
                    setter methods or configuration methods for optional dependencies
            We can make setter method required dependency by using @Required annotation

DEPENDENCY RESOLUTION PROCESS:
The Spring container performs the bean dependency resolution in following way:
1. The 'ApplicationContext is created.
2. Then this context is initialized with the configuration metadata(that describes all the beans).
3. For each bean its dependencies are expressed. 
    (Note : these are provded to bean, when bean is actually created
            These property or argument is an actual definition of 
                the value to set, or 
                a reference to another bean in the container).
4. These dependencies(the property or constructor argument) 
        is converted from its specified formate to the actual type.
    By  default spring can convert a value applied in the string formate 
            to all built-in types, such as int, long, String, boolean etc.


NOTE:  
    1. The Spring container validates the configuration of each bean as the container is created.
    2. The bean properties are not set until bean is actually created.
    3. Only the bean that are singleton scoped and set to be pre-intantiated are created when container is created.
    4. The beans are created only when it is required.(VERY IMPORTANT)
    5. Creation of bean causes a graph of beans to be created,     
             as bean's dependencies and its dependencies' dependencies (and so on). are created and assigned.
    6.The resolution mismatches among these dependencies show up late, ie. on the creation of first affected bean.

CIRCULAR DEPENDENCY :

If you use predominantly constructor injection, it is possible to create an unresolvable circular
dependency scenario.
For example: Class A requires an instance of class B through constructor injection, and class B
requires an instance of class A through constructor injection. If you configure beans for classes
A and B to be injected into each other, the Spring IoC container detects this circular reference at
runtime, and throws a BeanCurrentlyInCreationException.
One possible solution is to edit the source code of some classes to be configured by setters
rather than constructors. Alternatively, avoid constructor injection and use setter injection only. In
other words, although it is not recommended, you can configure circular dependencies with setter
injection.
Unlike the typical case (with no circular dependencies), a circular dependency between bean A
and bean B forces one of the beans to be injected into the other prior to being fully initialized itself
================================================================================
Reminder: 
Topics that we will ccover for Basic feature of Sprng framework will be :
    1- The Ioc container
    2- Resourses
    3- Validation, Data Binding and Type conersion
    4- Spring Expression Language
    5- Aspect Oriented Programing with Spring
    6- Spring AOP API











